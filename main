-- Services
local game = game
local workspace = workspace
local a = game:GetService("Players")
local b = game:GetService("RunService")
local c = game:GetService("UserInputService")
local d = game:GetService("TweenService")
local e = game:GetService("HttpService")
local f = game:GetService("Lighting")
local g = a.LocalPlayer

-- Math
local h, i = math.random, math.huge
local j, k = math.floor, math.ceil
local l, m = math.abs, math.sqrt
local n, o = math.sin, math.cos
local atan2 = math.atan2
local rad, deg = math.rad, math.deg
local min, max = math.min, math.max

-- Tables
local p, q = table.insert, table.remove
local r, s = table.sort, table.concat

-- Strings
local t, u = string.format, string.match
local v, w = string.lower, string.upper
local x, y = string.sub, string.gsub

-- Global functions
local pairs, ipairs = pairs, ipairs
local type, tostring = type, tostring
local pcall, xpcall = pcall, xpcall
local loadstring = loadstring
local setmetatable = setmetatable
local getmetatable = getmetatable

-- Constructors
local z = Color3.fromRGB
local A = UDim2.new
local B = Vector3.new
local C = CFrame.new
local Ray_new = Ray.new

-- File functions
local isfolder = isfolder
local isfile = isfile
local listfiles = listfiles
local writefile = writefile
local readfile = readfile
local delfile = delfile
local makefolder = makefolder
local setclipboard = setclipboard

-- Other services
local D = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Camera = workspace.CurrentCamera
local Mouse = g:GetMouse()
-- Utility library
local E = {}
local F = {} -- connections storage

do -- Utility functions
    function E.new_connection(G, H)
        local I = G:Connect(H)
        p(F, I)
        return I
    end
    
    function E.disconnect_all()
        for J, I in ipairs(F) do
            if I then
                I:Disconnect()
            end
        end
        F = {}
    end
    
    -- Get held weapon
    function E:GetHeld()
        local character = g.Character
        if not character then return nil end
        
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
                return tool
            end
        end
        return nil
    end
    
    -- Get weapon origin position
    function E:GetOrigin()
        local tool = E:GetHeld()
        if tool then
            local bulletStart = tool:FindFirstChild("BulletStart")
            if bulletStart then
                return bulletStart.Position
            end
            return tool.Handle.Position
        end
        return Camera.CFrame.Position
    end
    
    function E:GetEncryptionDict()
        -- Get encryption dictionary from SoundService
        local soundService = game:GetService("SoundService")
        local encryptionData = soundService:FindFirstChild("EncryptionData")
        if encryptionData then
            local currentDict = encryptionData:FindFirstChild("CurrentDict")
            if currentDict then
                local success, dict = pcall(function()
                    return game:GetService("HttpService"):JSONDecode(currentDict.Value)
                end)
                if success then
                    return dict
                end
            end
        end
        -- Return default dict if not found
        return {
            a = "qUz3j0QwOtY",
            c = "pWBL9UBsf13",
            b = "CVz3mo",
            e = "j6zNLcXtzsO",
            d = "MVhC83jAxA",
            g = "jjNjbJy1",
            f = "X2Bt4W",
            i = "y7BXZ",
            h = "SuQq4La",
            k = "GUudffJrBEXq",
            j = "2FLZxyayQd",
            m = "0FKMYohHyexy",
            l = "YFAjIdIb9",
            o = "jT3QZxSR",
            n = "f4rXJbnSnB0c",
            q = "TYJHKvYEVZio",
            p = "HHRupG8ouCG",
            s = "1DR1SyqsY1",
            r = "ertzRBJqboSl",
            u = "N0nfejjGk",
            t = "ZU0Hj6o9w",
            w = "EMXOZo",
            v = "Eu7ruC4e",
            y = "M7lWHYRX",
            x = "6Y5ootWPt"
        }
    end
    
    function E:GetDistance(target)
        if not target then return 0 end
        local character = g.Character
        if not character then return 0 end
        
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then return 0 end
        
        local targetRoot = target:FindFirstChild("HumanoidRootPart")
        if not targetRoot then
            targetRoot = target:FindFirstChild("Torso")
        end
        if not targetRoot then return 0 end
        
        return (humanoidRootPart.Position - targetRoot.Position).Magnitude
    end
    
    -- Check if player is alive
    function E:IsAlive(player)
        if not player then player = g end
        local character = player.Character
        if not character then return false end
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not humanoid then return false end
        
        return humanoid.Health > 0
    end
    
    -- Get distance between two positions
    function E:GetDistance(pos1, pos2)
        return (pos1 - pos2).Magnitude
    end
    
    -- World to screen position
    function E:WorldToScreen(position)
        local screenPos, onScreen = Camera:WorldToScreenPoint(position)
        return B(screenPos.X, screenPos.Y), onScreen
    end
end

-- Framework library
local framework = {connections = {}}

do -- Targeting framework
    framework.targeting = {}
    local targeting = framework.targeting
    
    -- Get all valid players
    function targeting:GetPlayers()
        local validPlayers = {}
        for _, player in ipairs(a:GetPlayers()) do
            if player ~= g and E:IsAlive(player) then
                local character = player.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    -- Check for ForceField
                    if not character:FindFirstChild("ForceField") then
                        p(validPlayers, player)
                    end
                end
            end
        end
        return validPlayers
    end
    
    -- Get closest player to local player
    function targeting:GetClosestToPlayer()
        local players = self:GetPlayers()
        local closest = nil
        local closestDistance = i
        
        local myPos = g.Character and g.Character:FindFirstChild("HumanoidRootPart")
        if not myPos then return nil end
        myPos = myPos.Position
        
        for _, player in ipairs(players) do
            local character = player.Character
            if character then
                local root = character:FindFirstChild("HumanoidRootPart")
                if root then
                    local distance = E:GetDistance(myPos, root.Position)
                    if distance < closestDistance then
                        closest = player
                        closestDistance = distance
                    end
                end
            end
        end
        
        return closest
    end
    
    -- Get closest player to cursor
    function targeting:GetClosestToCursor()
        local players = self:GetPlayers()
        local closest = nil
        local closestDistance = i
        
        local mousePos = c:GetMouseLocation()
        
        for _, player in ipairs(players) do
            local character = player.Character
            if character then
                local root = character:FindFirstChild("HumanoidRootPart")
                if root then
                    local screenPos, onScreen = E:WorldToScreen(root.Position)
                    if onScreen then
                        local distance = E:GetDistance(B(mousePos.X, mousePos.Y, 0), B(screenPos.X, screenPos.Y, 0))
                        if distance < closestDistance then
                            closest = player
                            closestDistance = distance
                        end
                    end
                end
            end
        end
        
        return closest
    end
    
    -- Get closest player to screen center
    function targeting:GetClosestToScreenCenter()
        local players = self:GetPlayers()
        local closest = nil
        local closestDistance = i
        
        local screenCenter = B(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2, 0)
        
        for _, player in ipairs(players) do
            local character = player.Character
            if character then
                local root = character:FindFirstChild("HumanoidRootPart")
                if root then
                    local screenPos, onScreen = E:WorldToScreen(root.Position)
                    if onScreen then
                        local distance = E:GetDistance(screenCenter, B(screenPos.X, screenPos.Y, 0))
                        if distance < closestDistance then
                            closest = player
                            closestDistance = distance
                        end
                    end
                end
            end
        end
        
        return closest
    end
    
    -- Main target selection function
    function targeting:GetTarget(method)
        if method == "Closest" then
            return self:GetClosestToPlayer()
        elseif method == "Cursor" then
            return self:GetClosestToCursor()
        elseif method == "ScrCenter" then
            return self:GetClosestToScreenCenter()
        end
        return nil
    end
end
local K =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/OnChangedCallback/fent.lua/refs/heads/main/library"))()
local L =
    K:Window(
    {
        Name = "Fentik.sexyy",
        Size = UDim2.new(0, 700, 0, 670),
        GradientTitle = {
            Enabled = false,
            Enabled = false,
            Start = Color3.fromRGB(255, 255, 255),
            Middle = Color3.fromRGB(255, 255, 255),
            End = Color3.fromRGB(255, 255, 255),
            Speed = 0.1
        }
    }
)
local M = L:Page({Name = "Ragebot", Columns = 2})
local N = L:Page({Name = "Visuals", Columns = 2})
local O = L:Page({Name = "Misc", Columns = 2})
local P = L:Page({Name = "AntiAim", Columns = 2})

-- Ragebot variables
local RagebotEnabled = false
local RagebotTarget = nil
local RagebotTargetMethod = "Closest"
local RagebotConnection = nil
local AutoShootEnabled = false
local AutoReloadEnabled = false
local AutoShootConnection = nil
local AimPart = "Head"
local ShowAimbot = false
local AimbotVisualizationType = "Beam"
local AimbotVisualization = nil

do -- Ragebot section
    local RagebotMain = M:Section({Name = "Main", Side = 1})
    
    -- Ragebot toggle
    local RagebotToggle = RagebotMain:Toggle({
        Name = "Ragebot",
        Default = false,
        Flag = "RagebotEnabled",
        Callback = function(value)
            RagebotEnabled = value
            
            if value then
                -- Enable ragebot logic
                if not RagebotConnection then
                    RagebotConnection = E.new_connection(b.Heartbeat, function()
                        if not E:IsAlive() then return end
                        
                        -- Get target based on selected method (360 FOV, no visibility check)
                        RagebotTarget = framework.targeting:GetTarget(RagebotTargetMethod)
                        
                        if RagebotTarget and RagebotTarget.Character then
                            local character = g.Character
                            if character then
                                -- Set rageaim values for silent aim
                                local rageaimValue = character:FindFirstChild("rageaim")
                                if not rageaimValue then
                                    rageaimValue = Instance.new("BoolValue")
                                    rageaimValue.Name = "rageaim"
                                    rageaimValue.Parent = character
                                end
                                rageaimValue.Value = true
                                
                                -- Set aim position
                                local aimposValue = character:FindFirstChild("aimpos")
                                if not aimposValue then
                                    aimposValue = Instance.new("Vector3Value")
                                    aimposValue.Name = "aimpos"
                                    aimposValue.Parent = character
                                end
                                
                                -- Get target part based on selected aim part
                                local targetRoot = RagebotTarget.Character:FindFirstChild(AimPart)
                                if not targetRoot then
                                    -- Fallback to Head if selected part not found
                                    targetRoot = RagebotTarget.Character:FindFirstChild("Head")
                                    if not targetRoot then
                                        targetRoot = RagebotTarget.Character:FindFirstChild("HumanoidRootPart")
                                    end
                                end
                                
                                if targetRoot then
                                    aimposValue.Value = targetRoot.Position
                                end
                            end
                        else
                            -- No target, disable rageaim
                            local character = g.Character
                            if character then
                                local rageaimValue = character:FindFirstChild("rageaim")
                                if rageaimValue then
                                    rageaimValue.Value = false
                                end
                            end
                        end
                    end)
                end
            else
                -- Disable ragebot logic
                if RagebotConnection then
                    RagebotConnection:Disconnect()
                    RagebotConnection = nil
                end
                
                -- Clean up values
                local character = g.Character
                if character then
                    local rageaimValue = character:FindFirstChild("rageaim")
                    if rageaimValue then
                        rageaimValue.Value = false
                    end
                end
                
                RagebotTarget = nil
            end
        end
    })
    
    -- Target selection dropdown
    local TargetDropdown = RagebotMain:Dropdown({
        Name = "Target Selection",
        Items = {"Closest", "Cursor", "ScrCenter"},
        Default = "Closest",
        Flag = "RagebotTargetMethod",
        Callback = function(value)
            RagebotTargetMethod = value
        end
    })
    
    -- Auto Shoot toggle
    local AutoShootToggle = RagebotMain:Toggle({
        Name = "Auto Shoot",
        Default = false,
        Flag = "AutoShoot",
        Callback = function(value)
            AutoShootEnabled = value
            
            if value then
                -- Start auto shoot logic
                if not AutoShootConnection then
                    AutoShootConnection = E.new_connection(b.Heartbeat, function()
                        if not E:IsAlive() then return end
                        
                        local character = g.Character
                        if character then
                            -- Создаем или обновляем BoolValue autoshoot
                            local autoShootValue = character:FindFirstChild("autoshoot")
                            if not autoShootValue then
                                autoShootValue = Instance.new("BoolValue")
                                autoShootValue.Name = "autoshoot"
                                autoShootValue.Parent = character
                            end
                            
                            -- Включаем/выключаем autoshoot в зависимости от наличия цели
                            if RagebotEnabled and RagebotTarget then
                                autoShootValue.Value = true
                            else
                                autoShootValue.Value = false
                            end
                        end
                    end)
                end
            else
                -- Stop auto shoot
                if AutoShootConnection then
                    AutoShootConnection:Disconnect()
                    AutoShootConnection = nil
                end
                
                -- Отключаем autoshoot value
                local character = g.Character
                if character then
                    local autoShootValue = character:FindFirstChild("autoshoot")
                    if autoShootValue then
                        autoShootValue.Value = false
                    end
                end
            end
        end
    })
    
    -- Auto Reload toggle
    local AutoReloadToggle = RagebotMain:Toggle({
        Name = "Auto Reload",
        Default = false,
        Flag = "AutoReload",
        Callback = function(value)
            AutoReloadEnabled = value
            
            if value then
                -- Auto reload logic
                task.spawn(function()
                    while AutoReloadEnabled do
                        task.wait(0.1)
                        if not E:IsAlive() then continue end
                        
                        local tool = E:GetHeld()
                        if tool then
                            local ammo = tool:FindFirstChild("Ammo")
                            if ammo and ammo:IsA("IntValue") and ammo.Value <= 0 then
                                -- Trigger reload
                                game:GetService("ReplicatedStorage"):WaitForChild("Reload"):FireServer()
                                task.wait(2) -- Wait for reload animation
                            end
                        end
                    end
                end)
            end
        end
    })
end

do -- Ragebot Settings section
    local RagebotSettings = M:Section({Name = "Settings", Side = 2})
    
    -- Aim Part dropdown for R6
    local AimPartDropdown = RagebotSettings:Dropdown({
        Name = "Aim Part",
        Items = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"},
        Default = "Head",
        Flag = "RagebotAimPart",
        Callback = function(value)
            AimPart = value
        end
    })
end

do -- Ragebot Debug section
    local RagebotDebug = M:Section({Name = "Debug", Side = 1})
    
    -- Show Aimbot toggle
    local ShowAimbotToggle = RagebotDebug:Toggle({
        Name = "Show Aimbot",
        Default = false,
        Flag = "ShowAimbot",
        Callback = function(value)
            ShowAimbot = value
            
            if value then
                -- Create visualization
                task.spawn(function()
                    while ShowAimbot do
                        task.wait()
                        if not E:IsAlive() then continue end
                        
                        local character = g.Character
                        if character then
                            local aimpos = character:FindFirstChild("aimpos")
                            if aimpos and aimpos:IsA("Vector3Value") then
                                local tool = E:GetHeld()
                                if tool then
                                    local bulletStart = tool:FindFirstChild("BulletStart")
                                    if bulletStart then
                                        -- Clean old visualization
                                        if AimbotVisualization then
                                            if type(AimbotVisualization) == "table" then
                                                for _, v in pairs(AimbotVisualization) do
                                                    if v and v.Parent then
                                                        v:Destroy()
                                                    end
                                                end
                                            else
                                                if AimbotVisualization and AimbotVisualization.Parent then
                                                    AimbotVisualization:Destroy()
                                                end
                                            end
                                        end
                                        
                                        if AimbotVisualizationType == "Beam" then
                                            -- Create beam visualization
                                            local attachment0 = Instance.new("Attachment")
                                            attachment0.Position = bulletStart.Position
                                            attachment0.Parent = workspace.Terrain
                                            
                                            local attachment1 = Instance.new("Attachment")
                                            attachment1.Position = aimpos.Value
                                            attachment1.Parent = workspace.Terrain
                                            
                                            local beam = Instance.new("Beam")
                                            beam.Attachment0 = attachment0
                                            beam.Attachment1 = attachment1
                                            beam.Width0 = 0.1
                                            beam.Width1 = 0.1
                                            beam.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0))
                                            beam.Transparency = NumberSequence.new(0.5)
                                            beam.FaceCamera = true
                                            beam.Parent = workspace
                                            
                                            AimbotVisualization = {beam, attachment0, attachment1}
                                        else
                                            -- Create 3D part visualization
                                            local part = Instance.new("Part")
                                            part.Size = Vector3.new(0.2, 0.2, (bulletStart.Position - aimpos.Value).Magnitude)
                                            part.CFrame = CFrame.lookAt(bulletStart.Position, aimpos.Value) * CFrame.new(0, 0, -part.Size.Z/2)
                                            part.Anchored = true
                                            part.CanCollide = false
                                            part.Material = Enum.Material.Neon
                                            part.BrickColor = BrickColor.new("Really red")
                                            part.Transparency = 0.5
                                            part.Parent = workspace
                                            
                                            AimbotVisualization = part
                                        end
                                    end
                                end
                            end
                        end
                    end
                    
                    -- Clean up when disabled
                    if AimbotVisualization then
                        if type(AimbotVisualization) == "table" then
                            for _, v in pairs(AimbotVisualization) do
                                v:Destroy()
                            end
                        else
                            AimbotVisualization:Destroy()
                        end
                        AimbotVisualization = nil
                    end
                end)
            else
                -- Clean up visualization
                if AimbotVisualization then
                    if type(AimbotVisualization) == "table" then
                        for _, v in pairs(AimbotVisualization) do
                            v:Destroy()
                        end
                    else
                        AimbotVisualization:Destroy()
                    end
                    AimbotVisualization = nil
                end
            end
        end
    })
    
    -- Visualization Type dropdown
    local VisualizationDropdown = RagebotDebug:Dropdown({
        Name = "Visualization Type",
        Items = {"Beam", "3D Part"},
        Default = "Beam",
        Flag = "AimbotVisualizationType",
        Callback = function(value)
            AimbotVisualizationType = value
            
            -- Update visualization if active
            if ShowAimbot and AimbotVisualization then
                if type(AimbotVisualization) == "table" then
                    for _, v in pairs(AimbotVisualization) do
                        v:Destroy()
                    end
                else
                    AimbotVisualization:Destroy()
                end
                AimbotVisualization = nil
            end
        end
    })
end

do
    local Q = K:Watermark("Fentanyl | " .. g.Name .. " | " .. os.date("%y.%m.%d") .. " | Premium")
    local R = K:KeybindList()
    if Q then
        Q:SetVisibility(false)
    end
    if R then
        R:SetVisibility(false)
    end
    _G.Watermark = Q
    _G.KeybindList = R
end
do
    local S = L:Page({Name = "Settings", Columns = 2})
    local T = S:Section({Name = "Config", Side = 1})
    local U = ""
    local V = ""
    local W = {}
    do
        if not isfolder("fentanyl") then
            makefolder("fentanyl")
        end
        if not isfolder("fentanyl/Configs") then
            makefolder("fentanyl/Configs")
        end
    end
    local function X()
        local W = {}
        if isfolder("fentanyl/Configs") then
            for J, Y in ipairs(listfiles("fentanyl/Configs")) do
                local Z = Y:gsub("\\", "/")
                Z = Z:gsub("fentanyl/Configs/", "")
                p(W, Z)
            end
        end
        return W
    end
    local _ =
        T:Listbox(
        {Name = "Select Config", Items = X(), Default = "", Flag = "SelectedConfig", Callback = function(a0)
                U = a0
                print("Selected config:", a0)
            end}
    )
    local a1 =
        T:Textbox(
        {Name = "", Default = "", Placeholder = "Enter config name...", Flag = "ConfigName", Callback = function(a0)
                V = a0
            end}
    )
    local a2 =
        T:Button(
        {Name = "Create Config", Callback = function()
                if V and V ~= "" then
                    local a3 = V:gsub("%.json$", "") .. ".json"
                    local a4 = "fentanyl/Configs/" .. a3
                    if not isfile(a4) then
                        local a5 = K:GetConfig()
                        writefile(a4, a5)
                        K:Notification("Config created: " .. a3, 3, z(0, 255, 0))
                        _:Refresh(X())
                    else
                        K:Notification("Config already exists: " .. a3, 3, z(255, 0, 0))
                    end
                else
                    K:Notification("Please enter a config name", 3, z(255, 255, 0))
                end
            end}
    )
    local a6 =
        T:Button(
        {Name = "Save Config", Callback = function()
                local a3
                if U and U ~= "" then
                    a3 = U
                elseif V and V ~= "" then
                    a3 = V:gsub("%.json$", "") .. ".json"
                end
                if a3 then
                    local a4 = "fentanyl/Configs/" .. a3
                    local a5 = K:GetConfig()
                    writefile(a4, a5)
                    K:Notification("Config saved: " .. a3, 3, z(0, 255, 0))
                    _:Refresh(X())
                else
                    K:Notification("Please select or enter a config name", 3, z(255, 255, 0))
                end
            end}
    )
    local a7 =
        T:Button(
        {Name = "Load Config", Callback = function()
                if U and U ~= "" then
                    local a4 = "fentanyl/Configs/" .. U
                    if isfile(a4) then
                        local a5 = readfile(a4)
                        K:LoadConfig(a5)
                        K:Notification("Config loaded: " .. U, 3, z(0, 255, 0))
                    else
                        K:Notification("Config not found: " .. U, 3, z(255, 0, 0))
                    end
                else
                    K:Notification("Please select a config", 3, z(255, 255, 0))
                end
            end}
    )
    local a8 =
        T:Button(
        {Name = "Delete Config", Risky = true, Callback = function()
                if U and U ~= "" then
                    local a4 = "fentanyl/Configs/" .. U
                    print("Trying to delete config at path:", a4)
                    print("File exists:", isfile(a4))
                    if isfile(a4) then
                        delfile(a4)
                        K:Notification("Config deleted: " .. U, 3, z(0, 255, 0))
                        _:Refresh(X())
                        U = ""
                    else
                        K:Notification("Config not found: " .. a4, 5, z(255, 0, 0))
                    end
                else
                    K:Notification("Please select a config", 3, z(255, 255, 0))
                end
            end}
    )
    local a9 =
        T:Button(
        {Name = "Refresh Config List", Callback = function()
                _:Refresh(X())
                K:Notification("Config list refreshed", 2, z(0, 255, 0))
            end}
    )
    local aa = S:Section({Name = "Theming", Side = 2})
    local ab = aa:Label("Accent Color", "Left")
    local ac =
        ab:Colorpicker(
        {
            Name = "Accent Color",
            Default = z(31, 226, 130),
            Alpha = 1,
            Flag = "ThemeAccentColor",
            Callback = function(ad, ae)
                K:ChangeTheme("Accent", ad)
                if L.GradientTitle and L.GradientTitle.Enabled then
                    L.GradientTitle.Start = ad
                    L.GradientTitle.Middle = ad
                    L.GradientTitle.End = ad
                end
            end
        }
    )
    local af = aa:Label("Window Background", "Left")
    local ag =
        af:Colorpicker(
        {
            Name = "Window Background",
            Default = z(43, 43, 43),
            Alpha = 1,
            Flag = "ThemeWindowBackground",
            Callback = function(ad, ae)
                K:ChangeTheme("Window Background", ad)
            end
        }
    )
    local ah = aa:Label("Text Color", "Left")
    local ai =
        ah:Colorpicker(
        {
            Name = "Text Color",
            Default = z(180, 180, 180),
            Alpha = 1,
            Flag = "ThemeTextColor",
            Callback = function(ad, ae)
                K:ChangeTheme("Text", ad)
            end
        }
    )
    local aj = aa:Label("Section Background", "Left")
    local ak =
        aj:Colorpicker(
        {
            Name = "Section Background",
            Default = z(19, 19, 19),
            Alpha = 1,
            Flag = "ThemeSectionBackground",
            Callback = function(ad, ae)
                K:ChangeTheme("Section Background", ad)
            end
        }
    )
    local al = aa:Label("Element Color", "Left")
    local am =
        al:Colorpicker(
        {
            Name = "Element Color",
            Default = z(63, 63, 63),
            Alpha = 1,
            Flag = "ThemeElementColor",
            Callback = function(ad, ae)
                K:ChangeTheme("Element", ad)
            end
        }
    )
    local an = aa:Label("Border Color", "Left")
    local ao =
        an:Colorpicker(
        {
            Name = "Border Color",
            Default = z(68, 68, 68),
            Alpha = 1,
            Flag = "ThemeBorderColor",
            Callback = function(ad, ae)
                K:ChangeTheme("Border", ad)
            end
        }
    )
    local ap = aa:Label("Outline Color", "Left")
    local aq =
        ap:Colorpicker(
        {
            Name = "Outline Color",
            Default = z(0, 0, 0),
            Alpha = 1,
            Flag = "ThemeOutlineColor",
            Callback = function(ad, ae)
                K:ChangeTheme("Outline", ad)
            end
        }
    )
    local ar = aa:Label("Dark Liner", "Left")
    local as =
        ar:Colorpicker(
        {Name = "Dark Liner", Default = z(56, 56, 56), Alpha = 1, Flag = "ThemeDarkLiner", Callback = function(ad, ae)
                K:ChangeTheme("Dark Liner", ad)
            end}
    )
    local at = aa:Label("Risky Color", "Left")
    local au =
        at:Colorpicker(
        {
            Name = "Risky Color",
            Default = z(255, 50, 50),
            Alpha = 1,
            Flag = "ThemeRiskyColor",
            Callback = function(ad, ae)
                K:ChangeTheme("Risky", ad)
            end
        }
    )
    local av = aa:Label("Inline Color", "Left")
    local aw =
        av:Colorpicker(
        {
            Name = "Inline Color",
            Default = z(12, 12, 12),
            Alpha = 1,
            Flag = "ThemeInlineColor",
            Callback = function(ad, ae)
                K:ChangeTheme("Inline", ad)
            end
        }
    )
    local ax = S:Section({Name = "HUD", Side = 2})
    local ay =
        ax:Toggle(
        {Name = "Keybinds", Default = false, Flag = "HUDKeybinds", Callback = function(a0)
                if _G.KeybindList then
                    _G.KeybindList:SetVisibility(a0)
                end
            end}
    )
    local az =
        ax:Toggle(
        {Name = "Watermark", Default = false, Flag = "HUDWatermark", Callback = function(a0)
                if _G.Watermark then
                    _G.Watermark:SetVisibility(a0)
                end
            end}
    )
    local aA = ax:Label("GUI", "Left")
    local aB =
        aA:Keybind(
        {
            Name = "Toggle GUI",
            Mode = "Toggle",
            Default = Enum.KeyCode.Insert,
            Flag = "GUIToggleKey",
            Callback = function(aC)
                if L and L.SetOpen then
                    L:SetOpen(not L.IsOpen)
                end
            end
        }
    )
    do
        local aD = L.SetOpen
        L.SetOpen = function(self, aE)
            aD(self, aE)
            if aB and aB.Toggled ~= self.IsOpen then
                aB.Toggled = self.IsOpen
                if aB.KeybindListItem then
                    aB.KeybindListItem:SetStatus(self.IsOpen)
                end
            end
        end
    end
    do
        local aF = S:Section({Name = "Server", Side = 2})
        local aG =
            aF:Button(
            {Name = "Copy GameID", Callback = function()
                    setclipboard(tostring(game.GameId))
                    K:Notification("GameID copied to clipboard", 2, z(0, 255, 0))
                end}
        )
        local aH =
            aF:Button(
            {Name = "Copy JobID", Callback = function()
                    setclipboard(game.JobId)
                    K:Notification("JobID copied to clipboard", 2, z(0, 255, 0))
                end}
        )
        local aI =
            aF:Button(
            {
                Name = "Copy Join Script",
                Callback = function()
                    local aJ =
                        'game:GetService("TeleportService"):TeleportToPlaceInstance(' ..
                        game.PlaceId .. ', "' .. game.JobId .. '", game.Players.LocalPlayer)'
                    setclipboard(aJ)
                    K:Notification("Join script copied to clipboard", 2, z(0, 255, 0))
                end
            }
        )
        local aK =
            aF:Button(
            {Name = "Rejoin Game", Callback = function()
                    D:TeleportToPlaceInstance(game.PlaceId, game.JobId, g)
                end}
        )
        local aL =
            aF:Button(
            {
                Name = "Join New Server",
                Callback = function()
                    local aM, aN =
                        pcall(
                        function()
                            return e:JSONDecode(
                                game:HttpGetAsync(
                                    "https://games.roblox.com/v1/games/" ..
                                        game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                                )
                            )
                        end
                    )
                    if aM and aN and aN.data and #aN.data > 0 then
                        local aO = aN.data[h(1, #aN.data)]
                        D:TeleportToPlaceInstance(game.PlaceId, aO.id)
                    else
                        K:Notification("Failed to get server list", 3, z(255, 0, 0))
                    end
                end
            }
        )
    end
end
K:Notification("Script loaded, press Insert to toggle GUI", 4, z(0, 255, 0))
